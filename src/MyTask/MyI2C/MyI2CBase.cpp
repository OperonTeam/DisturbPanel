//--------------------------------------------------------------------------------------------------
//  Project : Disturbing Information
//  Edition : WioTerminal with Extend multi LCD-Monitor
//  File path : src/MyTask/MyI2C/MyI2CBase.cpp
//  Copyright 2019, 2020, 2021, 2022, 2023 - OperonTeam
//--------------------------------------------------------------------------------------------------
#include "MyBase.h"
#include "MyDevice.h"

//--------------------------------------------------------------------------------------------------
// クラス初期メソッド
//--------------------------------------------------------------------------------------------------
_MyI2CBase::_MyI2CBase()
{
	this->ulChipRunningCount	= (ULONG)0;
	this->ulTotalMillisTime		= (ULONG)0;
	this->ulLastProcessingTime	= (ULONG)0;
	this->ulThisUpdateStartTime	= (ULONG)0;
}
/**/
//--------------------------------------------------------------------------------------------------
// クラス終了メソッド
//--------------------------------------------------------------------------------------------------
_MyI2CBase::~_MyI2CBase()
{
}
/**/
//--------------------------------------------------------------------------------------------------
// センサー情報更新基底処理：初期処理を行う
//--------------------------------------------------------------------------------------------------
VOID			_MyI2CBase::BeginBaseInit(
_MyDEV_ID		MyDevID,
UCHAR			ucAddress,
TwoWire			*pTwoWire)
{
	//----------------------------------------------------------------------------------------------
	// センサー情報を退避
	//----------------------------------------------------------------------------------------------
	this->MyDevIdI2C	= MyDevID;
	this->ucI2CAddress	= ucAddress;
	this->pI2CTwoWire	= pTwoWire;
}
/**/
//--------------------------------------------------------------------------------------------------
// センサー情報更新基底処理：事前処理を行う
//--------------------------------------------------------------------------------------------------
VOID			_MyI2CBase::UpdateBaseStart(VOID)
{
	//----------------------------------------------------------------------------------------------
	// センサーの開始処理時間を退避
	//----------------------------------------------------------------------------------------------
	this->ulThisUpdateStartTime = millis();
}
/**/
//--------------------------------------------------------------------------------------------------
// センサー情報更新基底処理：事後処理を行う
//--------------------------------------------------------------------------------------------------
VOID			_MyI2CBase::UpdateBaseExit(VOID)
{
	//----------------------------------------------------------------------------------------------
	// センサー処理回数を加算
	//----------------------------------------------------------------------------------------------
	this->ulChipRunningCount++;

	//----------------------------------------------------------------------------------------------
	// センサー処理経過時間の合計を退避する
	//----------------------------------------------------------------------------------------------
	this->ulTotalMillisTime += (millis() - this->ulThisUpdateStartTime);
}
/**/
#ifdef	MY_DEBUG_PRINT
//--------------------------------------------------------------------------------------------------
// 内部情報ダンプ出力
//--------------------------------------------------------------------------------------------------
VOID			_MyI2CBase::MyDump(VOID)
{
	MY_TRACE("%6ld(%8.3f)", this->ulChipRunningCount, (FLOAT)(this->ulTotalMillisTime / this->ulChipRunningCount));
}
#endif
/*-- End Of File --*/
