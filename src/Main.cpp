//--------------------------------------------------------------------------------------------------
//  Project : Disturbing Information
//  Edition : WioTerminal with Extend multi LCD-Monitor
//  File path : src/Main.cpp
//  Copyright 2019, 2020, 2021, 2022, 2023 - OperonTeam
//--------------------------------------------------------------------------------------------------
#include "MyBase.h"
#include "MyDevice.h"
#include "MyJARVis.h"

#include "MySDWriter.h"
#include "MyPanel.h"
//
//--------------------------------------------------------------------------------------------------
// グローバル・クラス定義
//--------------------------------------------------------------------------------------------------
_MyTool				MyGlobalTool;									// 共通クラスの実体
_MyDevice			MyDevice;										// 装置クラスの実体
_MyJARVis			MyJARVis;										// 分析クラスの実体
_MyPanel			MyPanel;										// 表示クラスの実体
/**/
//--------------------------------------------------------------------------------------------------
// Ｓｅｔｕｐ関数
//--------------------------------------------------------------------------------------------------
VOID	setup(VOID)
{
	//----------------------------------------------------------------------------------------------
	// 起動メッセージ出力
	//----------------------------------------------------------------------------------------------
	MY_LOGBEGIN(NULL);
	MY_LOG(String(F("/***\n")).c_str());
	MY_LOG(String(F("\tThis JARVis is OperonTeam's personal product.\n")).c_str());
	MY_LOG(String(F("\tBuild:")).c_str());								MY_LOG("%s, %s\n", __DATE__, __TIME__);
	MY_LOG(String(F("\tWith RTL8720 Firmware version:")).c_str());		MY_LOG("%s\n", rpc_system_version());
	MY_LOG(String(F("***/\n")).c_str());
//---
	//----------------------------------------------------------------------------------------------
	// 情報記録用ＳＤ・デバイスを初期化する。
	//----------------------------------------------------------------------------------------------
	MySDWriter(&MyDevice);
//---
	//----------------------------------------------------------------------------------------------
	// ＳＤ・デバイスに保存してある、「実行環境定義情報ファイル」を取り込む。
	//----------------------------------------------------------------------------------------------
	MyGlobalTool.MyConfigFile.Initialize(__DATE__, __TIME__);
#ifdef	MY_DEBUG_CONFIGFILEDUMP
	MyGlobalTool.MyConfigFile.DumpTest();							// --- Print config file ---
#endif
//---
	//----------------------------------------------------------------------------------------------
	// デバイスクラスの初期化を行う
	//----------------------------------------------------------------------------------------------
	MyDevice.Initialize(&MyJARVis);
//---
	//----------------------------------------------------------------------------------------------
	// RTOSタスクを生成する。 *STACK SIZEの合計は、4K以内に納めること。 *Urgency 0:Low -> 25:MaxUrgency
	//				Name   StackSize     Urgency     Rate(Wait)  TimeoutWait
	//----------------------------------------------------------------------------------------------
	MyDevice.TaskCreateGPS(180, MY_TASK_LOW_URGENCY, 100);			// 100Hz	// Size:180 - HiWM: 48	: Max Stack:132
	MyDevice.TaskCreateI2C(160, MY_TASK_MID_URGENCY,  40);			//  40Hz 	// Size:160 - HiWM: 19	: Max Stack:141
	MyDevice.TaskCreateNET(512, MY_TASK_TOP_URGENCY,  20);			//  20Hz	// Size:512 - HiWM:116	: Max Stack:396		!!!!!!
	MyDevice.TaskCreateBLE(512, MY_TASK_TOP_URGENCY,  50);			//  50Hz
	//---
	delay(1000);

//---
	//----------------------------------------------------------------------------------------------
	// ＬＣＤパネル・表示クラスの初期化処理を行う。
	//----------------------------------------------------------------------------------------------
	MyPanel.Initialize(&MyDevice);
	//---
	//----------------------------------------------------------------------------------------------
	// ＬＣＤパネル・スプラッシュ表示を行う。
	//----------------------------------------------------------------------------------------------
	MyPanel.DrawBootsplash(&MyDevice, &MyJARVis);
}
/**/
//--------------------------------------------------------------------------------------------------
// ｌｏｏｐ関数（ビルドエラーになる為、VOID loop(VOID)のエントリーが必要）ですが、
// vTaskStartScheduler()以下は、タスク生成に失敗した場合にのみ実行される為、異常発生時以外に、
// RTOSから呼び出されることは「無い」はず。
//--------------------------------------------------------------------------------------------------
VOID	loop(VOID)
{
	//----------------------------------------------------------------------------------------------
	// ＳＤ書込みが完了する前に、ＦＤＲバッファが超過しない様、「適度」なタイミングで書き込みを行う。
	// ー＞ＳＤ書き込みレコード数と処理時間はリニアな関係で、実測値は1レコード辺り平均0.8ミリ秒。
	// 　　極少数のレコードをSDに書き込むことで処理時間は最小化するが、書き込み回数は増加する。
	// 　　今回は、ＳＤの劣化（と呼ぶべきかは不明だが）抑止を優先させたいことから、書き込み回数を
	// 　　縮小する。
	//----------------------------------------------------------------------------------------------
	BOOL	bSDWriteFlag = MY_FALSE;
	if (MyDevice.FDRRingBuffSize() > (MY_FDRREC_RINGBUFF_NUM * 0.8)) {		// 80% 蓄積したら書き込み
		//------------------------------------------------------------------------------------------
		// 情報記録用ＳＤ・デバイスの更新（実書込み）を行う。（失敗した場合は、MY_FALSEが返却される）
		//------------------------------------------------------------------------------------------
		bSDWriteFlag = MySDWriter(&MyDevice);
#ifdef	MY_DEBUG_TASKINFO
		MyDevice.DebugTaskInfo("Main.Loop");
#endif
	}
	//---
	//----------------------------------------------------------------------------------------------
	// ＦＤＲ記憶処理が行われなかった場合は、処理時間に余裕があるのでパネル描画を行う。
	// ー＞ＦＤＲ記録処理が失敗した場合（ＳＤメディア無しとか！）は、描画処理を行う
	//----------------------------------------------------------------------------------------------
	if (bSDWriteFlag != MY_TRUE) {
		//------------------------------------------------------------------------------------------
		// 表示パネル・デバイスの更新を行う
		//------------------------------------------------------------------------------------------
		MyPanel.DrawPanel(&MyDevice, &MyJARVis);
	} else {
		//
		//
		//
	}
	delay(10);
}
/*-- End Of File --*/
